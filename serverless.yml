service: ${file(./secrets.json):ApiName}
provider:
  name: aws
  runtime: nodejs14.x
  region: ${file(./secrets.json):DefaultRegion}
  stage: staging

functions:
  user_create:
    handler: src/lambda/user/user_create.handler
    events:
      - http:
          path: /api/user_create
          method: post
    cors: true
    origin: '*'

  user_email_verify:
    handler: src/lambda/user/user_email_verify.handler
    events:
      - http:
          path: /api/user_email_verify/{id+}
          method: get
    cors: true
    origin: '*'

  user_login:
    handler: src/lambda/user/user_login.handler
    events:
      - http:
          path: /api/user_login
          method: post
    cors: true
    origin: '*'
    

  user_name_get:
    handler: src/lambda/user/user_name_get.handler
    events:
      - http:
          path: /api/user-first-last-get-all
          method: post
    cors: true
    origin: '*'
######################################################### below are examples

  bye: #This Is an example
    handler: src/middleware/test_res.bye
    events:
      - http:
          path: /bye
          method: get
    cors: true
    origin: '*'

  hello: #This Is an example
    handler: src/middleware/test_res.hello
    # vpc:
    #   securityGroupIds:
    #     - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
    #   subnetIds:
    #     - Ref: ServerlessSubnetA
    events:
      - http:
          path: /hello
          method: get
    cors: true
    origin: '*'

  crud: #This Is an example
    handler: src/middleware/test_query.query
    # vpc:
    #   securityGroupIds:
    #     - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
    #   subnetIds:
    #     - Ref: ServerlessSubnetA
    events:
      - http:
          path: /query
          method: post
    cors: true
    origin: '*'
    headers: '*'

plugins:
  - serverless-offline
  - serverless-pseudo-parameters



#   environment:
#     #mysql
#     MYSQL_HOST: ${self:custom.MYSQL.HOST}
#     MYSQL_PORT: ${self:custom.MYSQL.PORT}
#     #common
#     DB_NAME: ${self:custom.DB_NAME}
#     USERNAME: ${self:custom.USERNAME}
#     PASSWORD: ${self:custom.PASSWORD}

#   custom:
#     DB_NAME: testapp
#     USERNAME: master
#     PASSWORD: password
#     MYSQL:
#       HOST:
#         Fn::GetAtt: [MySqlRDSInstance, Endpoint.Address]
#       PORT:
#         Fn::GetAtt: [MySqlRDSInstance, Endpoint.Port]

# resources:
#   Resources:
#     LambdaRole: ${file(./resource/LambdaRole.yml)}
#     ServerlessInternetGateway: ${file(./resource/ServerlessInternetGateway.yml)}
#     ServerlessVPC: ${file(./resource/ServerlessVPC.yml)}
#     ServerlessVPCGA: ${file(./resource/ServerlessVPCGA.yml)}
#     ServerlessSubnetA: ${file(./resource/ServerlessSubnetA.yml)}
#     ServerlessSubnetGroup: ${file(./resource/ServerlessSubnetGroup.yml)}
#     ServerlessSecurityGroup: ${file(./resource/ServerlessSecurityGroup.yml)}
#     RouteTablePublic: ${file(./resource/RouteTablePublic.yml)}
#     RoutePublic: ${file(./resource/RoutePublic.yml)}
#     RouteTableAssociationSubnetA: ${file(./resource/RouteTableAssociationSubnetA.yml)}
#     MySqlRDSInstance: ${file(./resource/MySqlRDSInstance.yml)}

# # VPC config
#     ServerlessVPC:
#       Type: AWS::EC2::VPC
#       Properties:
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.0.0/16
#         EnableDnsSupport: true
#         EnableDnsHostnames: true
#         InstanceTenancy: default
#     ServerlessSubnetA:
#       DependsOn: ServerlessVPC
#       Type: AWS::EC2::Subnet
#       Properties:
#         VpcId:
#           Ref: ServerlessVPC
#         AvailabilityZone: ${self:provider.region}a
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.0.0/24
#     ServerlessSubnetB:
#       DependsOn: ServerlessVPC
#       Type: AWS::EC2::Subnet
#       Properties:
#         VpcId:
#           Ref: ServerlessVPC
#         AvailabilityZone: ${self:provider.region}b
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.1.0/24
#     ServerlessSubnetC:
#       DependsOn: ServerlessVPC
#       Type: AWS::EC2::Subnet
#       Properties:
#         VpcId:
#           Ref: ServerlessVPC
#         AvailabilityZone: ${self:provider.region}c
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.2.0/24
#     # Aurora DB config
#     AuroraSubnetGroup:
#       Type: AWS::RDS::DBSubnetGroup
#       Properties:
#         DBSubnetGroupDescription: "Aurora Subnet Group"
#         SubnetIds:
#           - Ref: ServerlessSubnetA
#           - Ref: ServerlessSubnetB
#           - Ref: ServerlessSubnetC
#     AuroraRDSClusterParameter:
#       Type: AWS::RDS::DBClusterParameterGroup
#       Properties:
#         Description: Parameter group for the Serverless Aurora RDS DB.
#         Family: aurora-mysql5.7
#         Parameters:
#           character_set_database: "utf32"
#     AuroraRDSInstanceParameter:
#       Type: AWS::RDS::DBParameterGroup
#       Properties:
#         Description: Parameter group for the Serverless Aurora RDS DB.
#         Family: aurora-mysql5.7
#         Parameters:
#           sql_mode: IGNORE_SPACE
#           max_connections: 100
#           wait_timeout: 900
#           interactive_timeout: 900
#     AuroraRDSCluster:
#       Type: "AWS::RDS::DBCluster"
#       Properties:
#         MasterUsername: ${self:custom.AURORA.USERNAME}
#         MasterUserPassword: ${self:custom.AURORA.PASSWORD}
#         DBSubnetGroupName:
#           Ref: AuroraSubnetGroup
#         Engine: aurora-mysql
#         EngineVersion: "5.7"
#         DatabaseName: ${self:custom.AURORA.DB_NAME}
#         BackupRetentionPeriod: 3
#         DBClusterParameterGroupName:
#           Ref: AuroraRDSClusterParameter
#         VpcSecurityGroupIds:
#           - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
#     AuroraRDSInstance:
#       Type: "AWS::RDS::DBInstance"
#       Properties:
#         DBInstanceClass: db.t2.medium
#         DBSubnetGroupName:
#           Ref: AuroraSubnetGroup
#         Engine: aurora-mysql
#         EngineVersion: "8.0"
#         PubliclyAccessible: false
#         DBParameterGroupName:
#           Ref: AuroraRDSInstanceParameter
#         DBClusterIdentifier:
#           Ref: AuroraRDSCluster
