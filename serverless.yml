service: ${file(./secrets.json):ApiName}
provider:
  name: aws
  runtime: nodejs14.x
  region: ${file(./secrets.json):DefaultRegion}
  stage: staging

functions:
  product_search_fake: #//fake endpoint
    handler: src/lambda/product/product_search.handler
    events:
      - http:
          path: /api/product_search
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------

  user_access_level_get: #//fake endpoint
    handler: src/lambda/user/user_access_level_get.handler
    events:
      - http:
          path: /api/user_access_level_get
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------

  product_details_get:
    handler: src/lambda/product/products_get.handler
    events:
      - http:
          path: /api/products_get/{keyword}
          method: get
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------

  user_create:
    handler: src/lambda/user/user_create.handler
    events:
      - http:
          path: /api/user_create
          method: post
    cors: true
    origin: "*"
  #--------------------------------------------------------------------------

  user_login_emailorphone:
    handler: src/lambda/user/user_login_emailorphone.handler
    events:
      - http:
          path: /api/user_login_emailorphone
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------

  wishlist_insert_product:
    handler: src/lambda/wishlist/wishlist_insert_product.handler
    events:
      - http:
          path: /api/wishlist_insert_product
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------

  user_email_or_phone_verify:
    handler: src/lambda/user/user_email_or_phone_verify.handler
    events:
      - http:
          path: /api/user_email_or_phone_verify
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------

  user_email_verify:
    handler: src/lambda/user/user_email_verify_id_user.handler
    events:
      - http:
          path: /api/user_email_verify/{id_user}
          method: get
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------

  user_login:
    handler: src/lambda/user/user_login.handler
    events:
      - http:
          path: /api/user_login
          method: post
    cors: true
    origin: "*"
  #------------------------------------------------------------------------

  order_update:
    handler: src/lambda/order/order_update.handler
    events:
      - http:
          path: /api/order_update
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------

  wishlist_get_all:
    handler: src/lambda/product/wishlist_get_all.handler
    events:
      - http:
          path: /api/wishlist_get_all
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------

  user_logout:
    handler: src/lambda/user/user_logout.handler
    events:
      - http:
          path: /api/user_logout
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------

  user_name_get:
    handler: src/lambda/user/user_name_get.handler
    events:
      - http:
          path: /api/user-first-last-get-all
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------

  product_create:
    handler: src/lambda/product/product_create.handler
    events:
      - http:
          path: /api/product-create
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------

  shipping_create:
    handler: src/lambda/shipping/shipping_create.handler
    events:
      - http:
          path: /api/shipping-create
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------

  shipping_update:
    handler: src/lambda/shipping/shipping_update.handler
    events: 
      - http:
          path: /api/shipping-update
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------
  order_create:
    handler: src/lambda/order/order_create.handler
    events: 
      - http:
          path: /api/order_create
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------
  categories_get:
    handler: src/lambda/product/categories_get.handler
    events: 
      - http:
          path: /api/categories_get
          method: get
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------
  #-------------------------------------------------------------------------
  product_review_create:
    handler: src/lambda/product/product_review_create.handler
    events: 
      - http:
          path: /api/product_review_create
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------
  products_get:
    handler: src/lambda/product/products_get.handler
    events: 
      - http:
          path: /api/products_get
          method: get
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------
  user_details:
    handler: src/lambda/user/user_details.handler
    events: 
      - http:
          path: /api/user_details
          method: get
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------
  user_update:
    handler: src/lambda/user/user_update.handler
    events: 
      - http:
          path: /api/user_update
          method: put
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------
  vendor_create:
    handler: src/lambda/vendor/vendor_create.handler
    events: 
      - http:
          path: /api/vendor_create
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------
  vendor_review_create:
    handler: src/lambda/vendor/vendor_review_create.handler
    events: 
      - http:
          path: /api/vendor_review_create
          method: post
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------
  vendor_update:
    handler: src/lambda/vendor/vendor_update.handler
    events: 
      - http:
          path: /api/vendor_update
          method: put
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------
  return_create:
    handler: src/lambda/return/return_create.handler
    events:
      - http:
          path: /api/order/{id_order}/return_create
          method: post
    cors: true
    origin: "*"
  #--------------------------------------------------------------------------
  return_get:
    handler: src/lambda/return/return_get.handler
    events:
      - http:
          path: /api/returns/{id_return}
          method: get
    cors: true
    origin: "*"
  #--------------------------------------------------------------------------
  returns_get_all:
    handler: src/lambda/return/returns_get_all.handler
    events:
      - http:
          path: /api/returns
          method: get
    cors: true
    origin: "*"
  #---------------------------------------------------------------------------
  refund_create:
    handler: src/lambda/refund/refund_create.handler
    events:
      - http:
          path: /api/refunds/refund_create/{id_order}/{id_return}
          method: post
    cors: true
    origin: "*"
  #-----------------------------------------------------------------------------
  refund_get:
    handler: src/lambda/refund/refund_get.handler
    events:
      - http:
          path: /api/refunds/{id_refund}
          method: get
    cors: true
    origin: "*"
  #-------------------------------------------------------------------------------
  refunds_get_all:
    handler: src/lambda/refund/refunds_get_all.handler
    events:
      - http:
          path: /api/refunds
          method: get
    cors: true
    origin: "*"
  #--------------------------------------------------------------------------------
  ######################################################### below are examples

  bye: #This Is an example
    handler: src/middleware/test_res.bye
    events:
      - http:
          path: /bye
          method: get
    cors: true
    origin: "*"

  hello: #This Is an example
    handler: src/middleware/test_res.hello
    # vpc:
    #   securityGroupIds:
    #     - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
    #   subnetIds:
    #     - Ref: ServerlessSubnetA
    events:
      - http:
          path: /hello
          method: get
    cors: true
    origin: "*"

  crud: #This Is an example
    handler: src/middleware/test_query.query
    # vpc:
    #   securityGroupIds:
    #     - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
    #   subnetIds:
    #     - Ref: ServerlessSubnetA
    events:
      - http:
          path: /query
          method: post
    cors: true
    origin: "*"
    headers: "*"

plugins:
  - serverless-offline
  - serverless-pseudo-parameters
#   environment:
#     #mysql
#     MYSQL_HOST: ${self:custom.MYSQL.HOST}
#     MYSQL_PORT: ${self:custom.MYSQL.PORT}
#     #common
#     DB_NAME: ${self:custom.DB_NAME}
#     USERNAME: ${self:custom.USERNAME}
#     PASSWORD: ${self:custom.PASSWORD}

#   custom:
#     DB_NAME: testapp
#     USERNAME: master
#     PASSWORD: password
#     MYSQL:
#       HOST:
#         Fn::GetAtt: [MySqlRDSInstance, Endpoint.Address]
#       PORT:
#         Fn::GetAtt: [MySqlRDSInstance, Endpoint.Port]

# resources:
#   Resources:
#     LambdaRole: ${file(./resource/LambdaRole.yml)}
#     ServerlessInternetGateway: ${file(./resource/ServerlessInternetGateway.yml)}
#     ServerlessVPC: ${file(./resource/ServerlessVPC.yml)}
#     ServerlessVPCGA: ${file(./resource/ServerlessVPCGA.yml)}
#     ServerlessSubnetA: ${file(./resource/ServerlessSubnetA.yml)}
#     ServerlessSubnetGroup: ${file(./resource/ServerlessSubnetGroup.yml)}
#     ServerlessSecurityGroup: ${file(./resource/ServerlessSecurityGroup.yml)}
#     RouteTablePublic: ${file(./resource/RouteTablePublic.yml)}
#     RoutePublic: ${file(./resource/RoutePublic.yml)}
#     RouteTableAssociationSubnetA: ${file(./resource/RouteTableAssociationSubnetA.yml)}
#     MySqlRDSInstance: ${file(./resource/MySqlRDSInstance.yml)}

# # VPC config
#     ServerlessVPC:
#       Type: AWS::EC2::VPC
#       Properties:
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.0.0/16
#         EnableDnsSupport: true
#         EnableDnsHostnames: true
#         InstanceTenancy: default
#     ServerlessSubnetA:
#       DependsOn: ServerlessVPC
#       Type: AWS::EC2::Subnet
#       Properties:
#         VpcId:
#           Ref: ServerlessVPC
#         AvailabilityZone: ${self:provider.region}a
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.0.0/24
#     ServerlessSubnetB:
#       DependsOn: ServerlessVPC
#       Type: AWS::EC2::Subnet
#       Properties:
#         VpcId:
#           Ref: ServerlessVPC
#         AvailabilityZone: ${self:provider.region}b
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.1.0/24
#     ServerlessSubnetC:
#       DependsOn: ServerlessVPC
#       Type: AWS::EC2::Subnet
#       Properties:
#         VpcId:
#           Ref: ServerlessVPC
#         AvailabilityZone: ${self:provider.region}c
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.2.0/24
#     # Aurora DB config
#     AuroraSubnetGroup:
#       Type: AWS::RDS::DBSubnetGroup
#       Properties:
#         DBSubnetGroupDescription: "Aurora Subnet Group"
#         SubnetIds:
#           - Ref: ServerlessSubnetA
#           - Ref: ServerlessSubnetB
#           - Ref: ServerlessSubnetC
#     AuroraRDSClusterParameter:
#       Type: AWS::RDS::DBClusterParameterGroup
#       Properties:
#         Description: Parameter group for the Serverless Aurora RDS DB.
#         Family: aurora-mysql5.7
#         Parameters:
#           character_set_database: "utf32"
#     AuroraRDSInstanceParameter:
#       Type: AWS::RDS::DBParameterGroup
#       Properties:
#         Description: Parameter group for the Serverless Aurora RDS DB.
#         Family: aurora-mysql5.7
#         Parameters:
#           sql_mode: IGNORE_SPACE
#           max_connections: 100
#           wait_timeout: 900
#           interactive_timeout: 900
#     AuroraRDSCluster:
#       Type: "AWS::RDS::DBCluster"
#       Properties:
#         MasterUsername: ${self:custom.AURORA.USERNAME}
#         MasterUserPassword: ${self:custom.AURORA.PASSWORD}
#         DBSubnetGroupName:
#           Ref: AuroraSubnetGroup
#         Engine: aurora-mysql
#         EngineVersion: "5.7"
#         DatabaseName: ${self:custom.AURORA.DB_NAME}
#         BackupRetentionPeriod: 3
#         DBClusterParameterGroupName:
#           Ref: AuroraRDSClusterParameter
#         VpcSecurityGroupIds:
#           - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
#     AuroraRDSInstance:
#       Type: "AWS::RDS::DBInstance"
#       Properties:
#         DBInstanceClass: db.t2.medium
#         DBSubnetGroupName:
#           Ref: AuroraSubnetGroup
#         Engine: aurora-mysql
#         EngineVersion: "8.0"
#         PubliclyAccessible: false
#         DBParameterGroupName:
#           Ref: AuroraRDSInstanceParameter
#         DBClusterIdentifier:
#           Ref: AuroraRDSCluster
